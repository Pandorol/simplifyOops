{"version":3,"sources":["file:///E:/sxbs2/sxbs2/assets/script/core/common/loader/ResLoader.ts"],"names":["ResLoader","Asset","assetManager","error","js","resources","warn","defaultBundleName","cdn","bundles","Map","maxConcurrency","downloader","value","maxRequestsPerFrame","maxRetryCount","retryInterval","init","config","enable","bundleName","packages","set","loadRemote","url","args","options","onComplete","length","loadBundle","v","Promise","resolve","reject","version","err","bundle","removeBundle","get","releaseAll","preload","paths","type","onProgress","Array","parseLoadResArgs","loadByArgs","preloadAsync","data","message","preloadDir","dir","load","loadAsync","asset","loadDir","release","path","getBundle","releasePrefabtDepsRecursively","releaseDir","infos","getDirWithPath","map","info","uuid","decRef","assets","pathsOut","typeOut","onProgressOut","onCompleteOut","undefined","isValidType","isChildClassOf","loadByBundleAndArgs","dump","forEach","key","console","log","count","resLoader"],"mappings":"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","sourcesContent":["//cpall\r\nimport { Asset, AssetManager, __private, assetManager, error, js, resources, warn } from \"cc\";\r\n\r\nexport type AssetType<T = Asset> = __private.__types_globals__Constructor<T> | null;\r\nexport type Paths = string | string[];\r\nexport type ProgressCallback = ((finished: number, total: number, item: AssetManager.RequestItem) => void) | null;\r\nexport type CompleteCallback = any;\r\nexport type IRemoteOptions = { [k: string]: any; ext?: string; } | null;\r\n\r\ninterface ILoadResArgs<T extends Asset> {\r\n    /** 资源包名 */\r\n    bundle?: string;\r\n    /** 资源文件夹名 */\r\n    dir?: string;\r\n    /** 资源路径 */\r\n    paths: Paths;\r\n    /** 资源类型 */\r\n    type: AssetType<T>;\r\n    /** 资源加载进度 */\r\n    onProgress: ProgressCallback;\r\n    /** 资源加载完成 */\r\n    onComplete: CompleteCallback;\r\n    /** 是否为预加载 */\r\n    preload?: boolean;\r\n}\r\n\r\n/** \r\n * 游戏资源管理\r\n * 1、加载默认resources文件夹中资源\r\n * 2、加载默认bundle远程资源\r\n * 3、主动传递bundle名时，优先加载传递bundle名资源包中的资源\r\n * \r\n * @help    https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037901&doc_id=2873565\r\n */\r\nexport class ResLoader {\r\n    //#region 资源配置数据\r\n    /** 全局默认加载的资源包名 */\r\n    defaultBundleName: string = \"resources\";\r\n    /** 是否使用远程 CDN 资源 */\r\n    cdn: boolean = false;\r\n\r\n    /** 下载时的最大并发数 - 项目设置 -> 项目数据 -> 资源下载并发数，设置默认值；初始值为15 */\r\n    get maxConcurrency() {\r\n        return assetManager.downloader.maxConcurrency;\r\n    }\r\n    set maxConcurrency(value) {\r\n        assetManager.downloader.maxConcurrency = value;\r\n    }\r\n\r\n    /** 下载时每帧可以启动的最大请求数 - 默认值为15 */\r\n    get maxRequestsPerFrame() {\r\n        return assetManager.downloader.maxRequestsPerFrame;\r\n    }\r\n    set maxRequestsPerFrame(value) {\r\n        assetManager.downloader.maxRequestsPerFrame = value;\r\n    }\r\n\r\n    /** 失败重试次数 - 默认值为0 */\r\n    get maxRetryCount() {\r\n        return assetManager.downloader.maxRetryCount;\r\n    }\r\n    set maxRetryCount(value) {\r\n        assetManager.downloader.maxRetryCount = value;\r\n    }\r\n\r\n    /** 重试的间隔时间，单位为毫秒 - 默认值为2000毫秒 */\r\n    get retryInterval() {\r\n        return assetManager.downloader.retryInterval;\r\n    }\r\n    set retryInterval(value) {\r\n        assetManager.downloader.retryInterval = value;\r\n    }\r\n\r\n    /** 资源包配置 */\r\n    private bundles: Map<string, string> = new Map<string, string>();\r\n    //#endregion\r\n\r\n    init(config: any) {\r\n        this.cdn = config.enable;\r\n        for (let bundleName in config.packages) {\r\n            this.bundles.set(bundleName, config.packages[bundleName]);\r\n        }\r\n    }\r\n\r\n    //#region 加载远程资源\r\n    /**\r\n     * 加载远程资源\r\n     * @param url           资源地址\r\n     * @param options       资源参数，例：{ ext: \".png\" }\r\n     * @param onComplete    加载完成回调\r\n     * @example\r\nvar opt: IRemoteOptions = { ext: \".png\" };\r\nvar onComplete = (err: Error | null, data: ImageAsset) => {\r\n    const texture = new Texture2D();\r\n    texture.image = data;\r\n    \r\n    const spriteFrame = new SpriteFrame();\r\n    spriteFrame.texture = texture;\r\n    \r\n    var sprite = this.sprite.addComponent(Sprite);\r\n    sprite.spriteFrame = spriteFrame;\r\n}\r\noops.res.loadRemote<ImageAsset>(this.url, opt, onComplete);\r\n     */\r\n    loadRemote<T extends Asset>(url: string, options: IRemoteOptions | null, onComplete?: CompleteCallback): void;\r\n    loadRemote<T extends Asset>(url: string, onComplete?: CompleteCallback): void;\r\n    loadRemote<T extends Asset>(url: string, ...args: any): void {\r\n        let options: IRemoteOptions | null = null;\r\n        let onComplete: CompleteCallback = null;\r\n        if (args.length == 2) {\r\n            options = args[0];\r\n            onComplete = args[1];\r\n        }\r\n        else {\r\n            onComplete = args[0];\r\n        }\r\n        assetManager.loadRemote<T>(url, options, onComplete);\r\n    }\r\n    //#endregion\r\n\r\n    //#region 资源包管理\r\n    /**\r\n     * 加载资源包\r\n     * @param url       资源地址\r\n     * @param v         资源MD5版本号\r\n     * @example\r\nvar serverUrl = \"http://192.168.1.8:8080/\";         // 服务器地址\r\nvar md5 = \"8e5c0\";                                  // Cocos Creator 构建后的MD5字符\r\nawait oops.res.loadBundle(serverUrl,md5);\r\n     */\r\n    loadBundle(url: string, v?: string) {\r\n        return new Promise<AssetManager.Bundle>((resolve, reject) => {\r\n            assetManager.loadBundle(url, { version: v }, (err, bundle: AssetManager.Bundle) => {\r\n                if (err) {\r\n                    return error(err);\r\n                }\r\n                resolve(bundle);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 释放资源包与包中所有资源\r\n     * @param bundleName 资源地址\r\n     */\r\n    removeBundle(bundleName: string) {\r\n        let bundle = assetManager.bundles.get(bundleName);\r\n        if (bundle) {\r\n            bundle.releaseAll();\r\n            assetManager.removeBundle(bundle);\r\n        }\r\n    }\r\n    //#endregion\r\n\r\n    //#region 预加载资源\r\n    /**\r\n     * 加载一个资源\r\n     * @param bundleName    远程包名\r\n     * @param paths         资源路径\r\n     * @param type          资源类型\r\n     * @param onProgress    加载进度回调\r\n     * @param onComplete    加载完成回调\r\n     */\r\n    preload<T extends Asset>(bundleName: string, paths: Paths, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    preload<T extends Asset>(bundleName: string, paths: Paths, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    preload<T extends Asset>(bundleName: string, paths: Paths, onComplete?: CompleteCallback): void;\r\n    preload<T extends Asset>(bundleName: string, paths: Paths, type: AssetType<T>, onComplete?: CompleteCallback): void;\r\n    preload<T extends Asset>(paths: Paths, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    preload<T extends Asset>(paths: Paths, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    preload<T extends Asset>(paths: Paths, onComplete?: CompleteCallback): void;\r\n    preload<T extends Asset>(paths: Paths, type: AssetType<T>, onComplete?: CompleteCallback): void;\r\n    preload<T extends Asset>(\r\n        bundleName: string,\r\n        paths?: Paths | AssetType<T> | ProgressCallback | CompleteCallback,\r\n        type?: AssetType<T> | ProgressCallback | CompleteCallback,\r\n        onProgress?: ProgressCallback | CompleteCallback,\r\n        onComplete?: CompleteCallback,\r\n    ) {\r\n        let args: ILoadResArgs<Asset> | null = null;\r\n        if (typeof paths === \"string\" || paths instanceof Array) {\r\n            args = this.parseLoadResArgs(paths, type, onProgress, onComplete);\r\n            args.bundle = bundleName;\r\n        }\r\n        else {\r\n            args = this.parseLoadResArgs(bundleName, paths, type, onProgress);\r\n            args.bundle = this.defaultBundleName;\r\n        }\r\n        args.preload = true;\r\n        this.loadByArgs(args);\r\n    }\r\n\r\n    /**\r\n     * 异步加载一个资源\r\n     * @param bundleName    远程包名\r\n     * @param paths         资源路径\r\n     * @param type          资源类型\r\n     */\r\n    preloadAsync<T extends Asset>(bundleName: string, paths: Paths, type: AssetType<T>): Promise<AssetManager.RequestItem>;\r\n    preloadAsync<T extends Asset>(bundleName: string, paths: Paths): Promise<AssetManager.RequestItem>;\r\n    preloadAsync<T extends Asset>(paths: Paths, type: AssetType<T>): Promise<AssetManager.RequestItem>;\r\n    preloadAsync<T extends Asset>(paths: Paths): Promise<AssetManager.RequestItem>;\r\n    preloadAsync<T extends Asset>(bundleName: string,\r\n        paths?: Paths | AssetType<T> | ProgressCallback | CompleteCallback,\r\n        type?: AssetType<T> | ProgressCallback | CompleteCallback): Promise<AssetManager.RequestItem> {\r\n        return new Promise((resolve, reject) => {\r\n            this.preload(bundleName, paths, type, (err: Error | null, data: AssetManager.RequestItem) => {\r\n                if (err) {\r\n                    warn(err.message);\r\n                }\r\n                resolve(data);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 预加载文件夹中的资源\r\n     * @param bundleName    远程包名\r\n     * @param dir           文件夹名\r\n     * @param type          资源类型\r\n     * @param onProgress    加载进度回调\r\n     * @param onComplete    加载完成回调\r\n     */\r\n    preloadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    preloadDir<T extends Asset>(bundleName: string, dir: string, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    preloadDir<T extends Asset>(bundleName: string, dir: string, onComplete?: CompleteCallback): void;\r\n    preloadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T>, onComplete?: CompleteCallback): void;\r\n    preloadDir<T extends Asset>(dir: string, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    preloadDir<T extends Asset>(dir: string, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    preloadDir<T extends Asset>(dir: string, onComplete?: CompleteCallback): void;\r\n    preloadDir<T extends Asset>(dir: string, type: AssetType<T>, onComplete?: CompleteCallback): void;\r\n    preloadDir<T extends Asset>(\r\n        bundleName: string,\r\n        dir?: string | AssetType<T> | ProgressCallback | CompleteCallback,\r\n        type?: AssetType<T> | ProgressCallback | CompleteCallback,\r\n        onProgress?: ProgressCallback | CompleteCallback,\r\n        onComplete?: CompleteCallback,\r\n    ) {\r\n        let args: ILoadResArgs<T> | null = null;\r\n        if (typeof dir === \"string\") {\r\n            args = this.parseLoadResArgs(dir, type, onProgress, onComplete);\r\n            args.bundle = bundleName;\r\n        }\r\n        else {\r\n            args = this.parseLoadResArgs(bundleName, dir, type, onProgress);\r\n            args.bundle = this.defaultBundleName;\r\n        }\r\n        args.dir = args.paths as string;\r\n        args.preload = true;\r\n        this.loadByArgs(args);\r\n    }\r\n    //#endregion\r\n\r\n    //#region 资源加载、获取、释放\r\n    /**\r\n     * 加载一个资源\r\n     * @param bundleName    远程包名\r\n     * @param paths         资源路径\r\n     * @param type          资源类型\r\n     * @param onProgress    加载进度回调\r\n     * @param onComplete    加载完成回调\r\n     * @example\r\noops.res.load(\"spine_path\", sp.SkeletonData, (err: Error | null, sd: sp.SkeletonData) => {\r\n\r\n});\r\n     */\r\n    load<T extends Asset>(bundleName: string, paths: Paths, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    load<T extends Asset>(bundleName: string, paths: Paths, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    load<T extends Asset>(bundleName: string, paths: Paths, onComplete?: CompleteCallback): void;\r\n    load<T extends Asset>(bundleName: string, paths: Paths, type: AssetType<T>, onComplete?: CompleteCallback): void;\r\n    load<T extends Asset>(paths: Paths, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    load<T extends Asset>(paths: Paths, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    load<T extends Asset>(paths: Paths, onComplete?: CompleteCallback): void;\r\n    load<T extends Asset>(paths: Paths, type: AssetType<T>, onComplete?: CompleteCallback): void;\r\n    load<T extends Asset>(\r\n        bundleName: string,\r\n        paths?: Paths | AssetType<T> | ProgressCallback | CompleteCallback,\r\n        type?: AssetType<T> | ProgressCallback | CompleteCallback,\r\n        onProgress?: ProgressCallback | CompleteCallback,\r\n        onComplete?: CompleteCallback,\r\n    ) {\r\n        let args: ILoadResArgs<T> | null = null;\r\n        if (typeof paths === \"string\" || paths instanceof Array) {\r\n            args = this.parseLoadResArgs(paths, type, onProgress, onComplete);\r\n            args.bundle = bundleName;\r\n        }\r\n        else {\r\n            args = this.parseLoadResArgs(bundleName, paths, type, onProgress);\r\n            args.bundle = this.defaultBundleName;\r\n        }\r\n        this.loadByArgs(args);\r\n    }\r\n\r\n    /**\r\n     * 异步加载一个资源\r\n     * @param bundleName    远程包名\r\n     * @param paths         资源路径\r\n     * @param type          资源类型\r\n     */\r\n    loadAsync<T extends Asset>(bundleName: string, paths: Paths, type: AssetType<T>): Promise<T>;\r\n    loadAsync<T extends Asset>(bundleName: string, paths: Paths): Promise<T>;\r\n    loadAsync<T extends Asset>(paths: Paths, type: AssetType<T>): Promise<T>;\r\n    loadAsync<T extends Asset>(paths: Paths): Promise<T>;\r\n    loadAsync<T extends Asset>(bundleName: string,\r\n        paths?: Paths | AssetType<T> | ProgressCallback | CompleteCallback,\r\n        type?: AssetType<T> | ProgressCallback | CompleteCallback): Promise<T> {\r\n        return new Promise((resolve, reject) => {\r\n            this.load(bundleName, paths, type, (err: Error | null, asset: T) => {\r\n                if (err) {\r\n                    warn(err.message);\r\n                }\r\n                resolve(asset);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 加载文件夹中的资源\r\n     * @param bundleName    远程包名\r\n     * @param dir           文件夹名\r\n     * @param type          资源类型\r\n     * @param onProgress    加载进度回调\r\n     * @param onComplete    加载完成回调\r\n     * @example\r\n// 加载进度事件\r\nvar onProgressCallback = (finished: number, total: number, item: any) => {\r\n    console.log(\"资源加载进度\", finished, total);\r\n}\r\n\r\n// 加载完成事件\r\nvar onCompleteCallback = () => {\r\n    console.log(\"资源加载完成\");\r\n}\r\noops.res.loadDir(\"game\", onProgressCallback, onCompleteCallback);\r\n     */\r\n    loadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    loadDir<T extends Asset>(bundleName: string, dir: string, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    loadDir<T extends Asset>(bundleName: string, dir: string, onComplete?: CompleteCallback): void;\r\n    loadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T>, onComplete?: CompleteCallback): void;\r\n    loadDir<T extends Asset>(dir: string, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    loadDir<T extends Asset>(dir: string, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\r\n    loadDir<T extends Asset>(dir: string, onComplete?: CompleteCallback): void;\r\n    loadDir<T extends Asset>(dir: string, type: AssetType<T>, onComplete?: CompleteCallback): void;\r\n    loadDir<T extends Asset>(\r\n        bundleName: string,\r\n        dir?: string | AssetType<T> | ProgressCallback | CompleteCallback,\r\n        type?: AssetType<T> | ProgressCallback | CompleteCallback,\r\n        onProgress?: ProgressCallback | CompleteCallback,\r\n        onComplete?: CompleteCallback,\r\n    ) {\r\n        let args: ILoadResArgs<T> | null = null;\r\n        if (typeof dir === \"string\") {\r\n            args = this.parseLoadResArgs(dir, type, onProgress, onComplete);\r\n            args.bundle = bundleName;\r\n        }\r\n        else {\r\n            args = this.parseLoadResArgs(bundleName, dir, type, onProgress);\r\n            args.bundle = this.defaultBundleName;\r\n        }\r\n        args.dir = args.paths as string;\r\n        this.loadByArgs(args);\r\n    }\r\n\r\n    /**\r\n     * 通过资源相对路径释放资源\r\n     * @param path          资源路径\r\n     * @param bundleName    远程资源包名\r\n     */\r\n    release(path: string, bundleName: string = this.defaultBundleName) {\r\n        const bundle = assetManager.getBundle(bundleName);\r\n        if (bundle) {\r\n            const asset = bundle.get(path);\r\n            if (asset) {\r\n                this.releasePrefabtDepsRecursively(asset);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通过相对文件夹路径删除所有文件夹中资源\r\n     * @param path          资源文件夹路径\r\n     * @param bundleName    远程资源包名\r\n     */\r\n    releaseDir(path: string, bundleName: string = this.defaultBundleName) {\r\n        const bundle: AssetManager.Bundle | null = assetManager.getBundle(bundleName);\r\n        if (bundle) {\r\n            var infos = bundle.getDirWithPath(path);\r\n            if (infos) {\r\n                infos.map((info) => {\r\n                    this.releasePrefabtDepsRecursively(info.uuid);\r\n                });\r\n            }\r\n\r\n            if (path == \"\" && bundleName != \"resources\") {\r\n                assetManager.removeBundle(bundle);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 释放预制依赖资源 */\r\n    private releasePrefabtDepsRecursively(uuid: string | Asset) {\r\n        if (uuid instanceof Asset) {\r\n            uuid.decRef();\r\n            // assetManager.releaseAsset(uuid);\r\n        }\r\n        else {\r\n            const asset = assetManager.assets.get(uuid);\r\n            if (asset) {\r\n                asset.decRef();\r\n                // assetManager.releaseAsset(asset);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取资源\r\n     * @param path          资源路径\r\n     * @param type          资源类型\r\n     * @param bundleName    远程资源包名\r\n     */\r\n    get<T extends Asset>(path: string, type?: AssetType<T>, bundleName: string = this.defaultBundleName): T | null {\r\n        var bundle: AssetManager.Bundle = assetManager.getBundle(bundleName)!;\r\n        return bundle.get(path, type);\r\n    }\r\n    //#endregion\r\n\r\n    private parseLoadResArgs<T extends Asset>(\r\n        paths: Paths,\r\n        type?: AssetType<T> | ProgressCallback | CompleteCallback,\r\n        onProgress?: AssetType<T> | ProgressCallback | CompleteCallback,\r\n        onComplete?: ProgressCallback | CompleteCallback\r\n    ) {\r\n        let pathsOut: any = paths;\r\n        let typeOut: any = type;\r\n        let onProgressOut: any = onProgress;\r\n        let onCompleteOut: any = onComplete;\r\n        if (onComplete === undefined) {\r\n            const isValidType = js.isChildClassOf(type as AssetType, Asset);\r\n            if (onProgress) {\r\n                onCompleteOut = onProgress as CompleteCallback;\r\n                if (isValidType) {\r\n                    onProgressOut = null;\r\n                }\r\n            }\r\n            else if (onProgress === undefined && !isValidType) {\r\n                onCompleteOut = type as CompleteCallback;\r\n                onProgressOut = null;\r\n                typeOut = null;\r\n            }\r\n            if (onProgress !== undefined && !isValidType) {\r\n                onProgressOut = type as ProgressCallback;\r\n                typeOut = null;\r\n            }\r\n        }\r\n        return { paths: pathsOut, type: typeOut, onProgress: onProgressOut, onComplete: onCompleteOut };\r\n    }\r\n\r\n    private loadByBundleAndArgs<T extends Asset>(bundle: AssetManager.Bundle, args: ILoadResArgs<T>): void {\r\n        if (args.dir) {\r\n            if (args.preload) {\r\n                bundle.preloadDir(args.paths as string, args.type, args.onProgress, args.onComplete);\r\n            }\r\n            else {\r\n                bundle.loadDir(args.paths as string, args.type, args.onProgress, args.onComplete);\r\n            }\r\n        }\r\n        else {\r\n            if (args.preload) {\r\n                bundle.preload(args.paths as any, args.type, args.onProgress, args.onComplete);\r\n            }\r\n            else {\r\n                bundle.load(args.paths as any, args.type, args.onProgress, args.onComplete);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async loadByArgs<T extends Asset>(args: ILoadResArgs<T>) {\r\n        if (args.bundle) {\r\n            let bundle = assetManager.bundles.get(args.bundle);\r\n            // 获取缓存中的资源包\r\n            if (bundle) {\r\n                this.loadByBundleAndArgs(bundle, args);\r\n            }\r\n            // 自动加载资源包\r\n            else {\r\n                const v = this.cdn ? this.bundles.get(args.bundle) : \"\";\r\n                bundle = await this.loadBundle(args.bundle, v);\r\n                if (bundle) this.loadByBundleAndArgs(bundle, args);\r\n            }\r\n        }\r\n        // 默认资源包\r\n        else {\r\n            this.loadByBundleAndArgs(resources, args);\r\n        }\r\n    }\r\n\r\n    /** 打印缓存中所有资源信息 */\r\n    dump() {\r\n        assetManager.assets.forEach((value: Asset, key: string) => {\r\n            console.log(assetManager.assets.get(key));\r\n        })\r\n        console.log(`当前资源总数:${assetManager.assets.count}`);\r\n    }\r\n}\r\n\r\nexport const resLoader = new ResLoader();"]}