{"version":3,"sources":["file:///E:/sxbs2/sxbs2/assets/core/common/audio/AudioMusic.ts"],"names":["AudioClip","AudioSource","_decorator","resLoader","ccclass","menu","AudioMusic","switch","onComplete","_progress","_isLoading","_nextBundleName","_nextUrl","start","node","on","EventType","ENDED","onAudioEnded","progress","duration","currentTime","value","load","url","callback","bundleName","defaultBundleName","data","loadAsync","playing","stop","release","clip","play","decRef"],"mappings":";;;;;;;;;;;;;;;;AACSA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,U,OAAAA,U;;AACxBC,MAAAA,S,iBAAAA,S;;;;;kFAFT;;;;;OAIM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAoBH,U;AAE1B;AACA;AACA;AACA;;4BAEaI,U,WADZF,OAAO,CAAC,YAAD,C,gBAAR,MACaE,UADb,SACgCL,WADhC,CAC4C;AAAA;AAAA;;AACxC;AADwC,eAExCM,MAFwC,GAEtB,IAFsB;;AAGxC;AAHwC,eAIxCC,UAJwC,GAIV,IAJU;AAAA,eAMhCC,SANgC,GAMZ,CANY;AAAA,eAOhCC,UAPgC,GAOV,KAPU;AAAA,eAQhCC,eARgC,GAQN,IARM;AAQG;AARH,eAShCC,QATgC,GASb,IATa;AAAA;;AASG;AAE3CC,QAAAA,KAAK,GAAG;AACJ;AACA,eAAKC,IAAL,CAAUC,EAAV,CAAad,WAAW,CAACe,SAAZ,CAAsBC,KAAnC,EAA0C,KAAKC,YAA/C,EAA6D,IAA7D;AACH,SAduC,CAgBxC;;;AAEQA,QAAAA,YAAY,GAAG;AACnB,eAAKV,UAAL,IAAmB,KAAKA,UAAL,EAAnB;AACH;AAED;;;AACY,YAARW,QAAQ,GAAW;AACnB,cAAI,KAAKC,QAAL,GAAgB,CAApB,EACI,KAAKX,SAAL,GAAiB,KAAKY,WAAL,GAAmB,KAAKD,QAAzC;AACJ,iBAAO,KAAKX,SAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACgB,YAARU,QAAQ,CAACG,KAAD,EAAgB;AACxB,eAAKb,SAAL,GAAiBa,KAAjB;AACA,eAAKD,WAAL,GAAmBC,KAAK,GAAG,KAAKF,QAAhC;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACc,cAAJG,IAAI,CAACC,GAAD,EAAcC,QAAd,EAAmCC,UAAkB,GAAG;AAAA;AAAA,oCAAUC,iBAAlE,EAAqF;AAC3F;AACA,cAAI,KAAKjB,UAAT,EAAqB;AACjB,iBAAKC,eAAL,GAAuBe,UAAvB;AACA,iBAAKd,QAAL,GAAgBY,GAAhB;AACA;AACH;;AAED,eAAKd,UAAL,GAAkB,IAAlB;AACA,cAAIkB,IAAe,GAAG,MAAM;AAAA;AAAA,sCAAUC,SAAV,CAAoBH,UAApB,EAAgCF,GAAhC,EAAqCxB,SAArC,CAA5B;;AACA,cAAI4B,IAAJ,EAAU;AACN,iBAAKlB,UAAL,GAAkB,KAAlB,CADM,CAGN;;AACA,gBAAI,KAAKE,QAAL,IAAiB,IAArB,EAA2B;AACvB;AACA,mBAAKW,IAAL,CAAU,KAAKX,QAAf,EAAyBa,QAAzB,EAAmC,KAAKd,eAAxC;AACA,mBAAKA,eAAL,GAAuB,KAAKC,QAAL,GAAgB,IAAvC;AACH,aAJD,MAKK;AACDa,cAAAA,QAAQ,IAAIA,QAAQ,EAApB,CADC,CAGD;;AACA,kBAAI,KAAKK,OAAT,EAAkB;AACd,qBAAKC,IAAL;AACH,eANA,CAQD;;;AACA,mBAAKC,OAAL,GATC,CAWD;;AACA,mBAAKC,IAAL,GAAYL,IAAZ;AACA,mBAAKM,IAAL;AACH;AACJ;AACJ;AAED;;;AACAF,QAAAA,OAAO,GAAG;AACN,cAAI,KAAKC,IAAT,EAAe;AACX,iBAAKF,IAAL;AACA,iBAAKE,IAAL,CAAUE,MAAV;AACA,iBAAKF,IAAL,GAAY,IAAZ;AACH;AACJ;;AAvFuC,O","sourcesContent":["//cpall\r\nimport { AudioClip, AudioSource, _decorator } from 'cc';\r\nimport { resLoader } from '../loader/ResLoader';\r\n\r\nconst { ccclass, menu } = _decorator;\r\n\r\n/** \r\n * 背景音乐 \r\n * 1、播放一个新背景音乐时，先加载音乐资源，然后停止正在播放的背景资源同时施放当前背景音乐资源，最后播放新的背景音乐\r\n */\r\n@ccclass('AudioMusic')\r\nexport class AudioMusic extends AudioSource {\r\n    /** 背景音乐开关 */\r\n    switch: boolean = true;\r\n    /** 背景音乐播放完成回调 */\r\n    onComplete: Function | null = null;\r\n\r\n    private _progress: number = 0;\r\n    private _isLoading: boolean = false;\r\n    private _nextBundleName: string = null!;   // 下一个音乐资源包\r\n    private _nextUrl: string = null!;          // 下一个播放音乐\r\n\r\n    start() {\r\n        // this.node.on(AudioSource.EventType.STARTED, this.onAudioStarted, this);\r\n        this.node.on(AudioSource.EventType.ENDED, this.onAudioEnded, this);\r\n    }\r\n\r\n    // private onAudioStarted() { }\r\n\r\n    private onAudioEnded() {\r\n        this.onComplete && this.onComplete();\r\n    }\r\n\r\n    /** 获取音乐播放进度 */\r\n    get progress(): number {\r\n        if (this.duration > 0)\r\n            this._progress = this.currentTime / this.duration;\r\n        return this._progress;\r\n    }\r\n    /**\r\n     * 设置音乐当前播放进度\r\n     * @param value     进度百分比0到1之间\r\n     */\r\n    set progress(value: number) {\r\n        this._progress = value;\r\n        this.currentTime = value * this.duration;\r\n    }\r\n\r\n    /**\r\n     * 加载音乐并播放\r\n     * @param url          音乐资源地址\r\n     * @param callback     加载完成回调\r\n     * @param bundleName   资源包名\r\n     */\r\n    async load(url: string, callback?: Function, bundleName: string = resLoader.defaultBundleName) {\r\n        // 下一个加载的背景音乐资源\r\n        if (this._isLoading) {\r\n            this._nextBundleName = bundleName;\r\n            this._nextUrl = url;\r\n            return;\r\n        }\r\n\r\n        this._isLoading = true;\r\n        var data: AudioClip = await resLoader.loadAsync(bundleName, url, AudioClip);\r\n        if (data) {\r\n            this._isLoading = false;\r\n\r\n            // 处理等待加载的背景音乐\r\n            if (this._nextUrl != null) {\r\n                // 加载等待播放的背景音乐\r\n                this.load(this._nextUrl, callback, this._nextBundleName);\r\n                this._nextBundleName = this._nextUrl = null!;\r\n            }\r\n            else {\r\n                callback && callback();\r\n\r\n                // 正在播放的时候先关闭\r\n                if (this.playing) {\r\n                    this.stop();\r\n                }\r\n\r\n                // 删除当前正在播放的音乐\r\n                this.release();\r\n\r\n                // 播放背景音乐\r\n                this.clip = data;\r\n                this.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 释放当前背景音乐资源 */\r\n    release() {\r\n        if (this.clip) {\r\n            this.stop();\r\n            this.clip.decRef();\r\n            this.clip = null;\r\n        }\r\n    }\r\n}"]}