{"version":3,"sources":["file:///G:/sxbs2/sxbs2/assets/libs/network/WsNet.ts"],"names":["WsNet","game","oops","WsFunc","WebSocket","window","sock","isConnected","lockReconnect","initFlag","wsUrl","timeout","respTimeout","timeoutObj","serverTimeoutObj","reConnectTimeoutObj","reConnectTryNum","maxReconnectTimes","_on_opened","event","console","log","logNet","clearAllTimeout","heartCheckAllStart","message","dispatchEvent","_on_recv_data","recvMsg","data","length","heartRespCheckReset","heartRespCheckStart","JSON","parse","msgType","doWithFunc","_on_socket_close","close","reConnect","_on_socket_err","connect","url","onopen","bind","onmessage","onclose","onerror","tipText","self","gui","toast","setTimeout","restart","clearTimeout","send","buf","isClear","initWs","heartCheckStart","setInterval","heartCheckReset","clearWs","msgData","userId","storage","getUser","isClose"],"mappings":"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","sourcesContent":["\r\nimport { game } from \"cc\";\r\nimport { oops } from '../../core/Oops';\r\nimport { WsFunc } from \"./WsFunc\";\r\nvar WebSocket = WebSocket || window.WebSocket;\r\nexport class WsNet {\r\n    sock = null\r\n    isConnected = false\r\n    lockReconnect = false\r\n    initFlag = true\r\n    wsUrl = null\r\n    timeout = 10000 //10秒\r\n    respTimeout = 30000 //30秒\r\n    timeoutObj = null\r\n    serverTimeoutObj = null\r\n    reConnectTimeoutObj = null\r\n    reConnectTryNum = 0 //重连重试次数\r\n    maxReconnectTimes = 10\t// 最大重连次数，超过这个次数，执行restart\r\n\r\n    _on_opened(event) {\r\n        console.log(\"ws connect server success\");\r\n\r\n        if (!this.initFlag) {\r\n            oops.log.logNet(\"重连成功！\")\r\n            // util.showAlert(\"重连成功！\");\r\n        }\r\n        this.reConnectTryNum = 0;\r\n        this.isConnected = true;\r\n        this.initFlag = false;\r\n        this.clearAllTimeout();\r\n        this.heartCheckAllStart();\r\n        oops.message.dispatchEvent(\"SOCKET_CONNECT_SUCCESS\", event)\r\n        // window.eventBus.pos(window.eventContant.SOCKET_CONNECT_SUCCESS);\r\n    }\r\n\r\n    _on_recv_data(event) {\r\n        // console.log('socket通知消息111', event);\r\n        var recvMsg = event.data;\r\n        if (null == recvMsg || 0 == recvMsg.length) {\r\n            console.log(\"消息为空，不处理\");\r\n            return;\r\n        }\r\n        //不管收到什么消息，则直接进行重置心跳包应答检测定时任务\r\n        this.heartRespCheckReset();\r\n        this.heartRespCheckStart();\r\n        //判断是否是心跳包\r\n        if (\"true\" == recvMsg) {\r\n            return;\r\n        }\r\n        oops.log.logNet(recvMsg);\r\n\r\n        //处理业务\r\n        recvMsg = JSON.parse(recvMsg);\r\n        var msgType = recvMsg.msgType;\r\n        if (null == msgType || 0 == msgType.length) {\r\n            oops.log.logNet(\"消息类型不存在\");\r\n            return;\r\n        }\r\n        this.doWithFunc(recvMsg);\r\n    }\r\n\r\n    _on_socket_close(event) {\r\n        if (this.sock) {\r\n            this.close();\r\n            console.log(\"ws connect server close -------------\");\r\n        }\r\n        if (!this.initFlag) {\r\n            //若是已连接后断开，则进行重连\r\n            //未连接，则不进行重连\r\n            this.reConnect();\r\n        }\r\n    }\r\n\r\n    _on_socket_err(event) {\r\n        if (this.sock) {\r\n            this.close();\r\n            console.log(\"ws connect server \" + event);\r\n        }\r\n        this.reConnect();\r\n    }\r\n\r\n    connect(url) {\r\n        this.wsUrl = url;\r\n        oops.log.logNet(\"websockt连接:\" + this.wsUrl);\r\n        this.sock = new WebSocket(this.wsUrl);\r\n\r\n        this.sock.onopen = this._on_opened.bind(this);\r\n        this.sock.onmessage = this._on_recv_data.bind(this);\r\n        this.sock.onclose = this._on_socket_close.bind(this);\r\n        this.sock.onerror = this._on_socket_err.bind(this);\r\n    }\r\n    //断线重连\r\n    reConnect(tipText = \"\") {\r\n        var self = this;\r\n        oops.log.logNet(\"ws reConnect 断线重连\" + self.lockReconnect);\r\n        if (self.lockReconnect) return;\r\n        if (self.reConnectTryNum > self.maxReconnectTimes) {\r\n            oops.log.logNet(\"ws reconnect fail\");\r\n            //多次重连失败，退出到登录界面\r\n            // if(uiFunc.findUI(\"uiLoading/uiWaitting\")){\r\n            // \tuiFunc.closeUI(\"uiLoading/uiWaitting\");\r\n            // }\r\n            // this.initWs();\r\n            // //关闭所有界面\r\n            // uiFunc.closeAllUI();\r\n            // //打开登录界面\r\n            // uiFunc.openUI(viewContant.LOGIN);\r\n            oops.gui.toast(\"网络连接失败，请检查网络后重新登录\");\r\n            setTimeout(() => {\r\n                game.restart();\r\n            }, 1500);\r\n\r\n            return;\r\n        }\r\n        self.lockReconnect = true;\r\n        self.reConnectTryNum += 1;\r\n        // if (window.openReconnectTip == 1) {\r\n        //     uiFunc.openTip(\"uiLoading/uiWaitting\", null, { text: tipText ? tipText : \"您的网络环境出现波动，请检查网络\" });\r\n        // }\r\n        //没连接上会一直重连，设置延迟避免请求过多\r\n        if (self.reConnectTimeoutObj) clearTimeout(self.reConnectTimeoutObj);\r\n        self.reConnectTimeoutObj = setTimeout(function () {\r\n            oops.log.logNet(\"ws reconnect server...\");\r\n            self.connect(self.wsUrl);\r\n            self.lockReconnect = false;\r\n        }, 2000);\r\n    }\r\n\r\n    //发送\r\n    send(buf) {\r\n        if (!this.sock || !this.isConnected) {\r\n            return;\r\n        }\r\n        this.sock.send(buf);\r\n    }\r\n\r\n    /**\r\n     * isClear 清空后回到未连接状态 不会进行重连(比如退出登录的时候)\r\n     */\r\n    close(isClear = false) {\r\n        oops.log.logNet(\"关闭ws链路\");\r\n        if (isClear) {\r\n            this.clearAllTimeout();\r\n            if (this.sock !== null) {\r\n                this.sock.onclose = function () { };\r\n                this.sock.onopen = function () { };\r\n                this.sock.onerror = function () { };\r\n                this.sock.onmessage = function () { };\r\n            }\r\n            this.initFlag = true;\r\n            this.lockReconnect = false;\r\n            this.wsUrl = null;\r\n            this.timeoutObj = null;\r\n            this.serverTimeoutObj = null;\r\n            this.reConnectTimeoutObj = null;\r\n            this.reConnectTryNum = 0;\r\n        }\r\n\r\n        this.isConnected = false;\r\n        if (this.sock !== null) {\r\n            this.sock.close();\r\n            this.sock = null;\r\n        }\r\n    }\r\n    //初始化链路\r\n    initWs() {\r\n        this.reConnectTryNum = 0;\r\n        this.initFlag = true;\r\n        //关闭定时器\r\n        this.clearAllTimeout();\r\n        //关闭链路\r\n        this.close();\r\n    }\r\n\r\n    //心跳检测所有定时器\r\n    heartCheckAllStart() {\r\n        this.heartCheckStart();\r\n        this.heartRespCheckStart();\r\n    }\r\n\r\n    //心跳检测\r\n    heartCheckStart() {\r\n        this.timeoutObj = setInterval(function () {\r\n            //这里发送一个心跳，后端收到后，返回一个心跳消息，\r\n            //onmessage拿到返回的心跳就说明连接正常\r\n            this.send(\"ping\");\r\n        }, this.timeout)\r\n    }\r\n\r\n    //心跳应答检测\r\n    heartRespCheckStart() {\r\n\r\n        this.serverTimeoutObj = setTimeout(function () { //如果超过一定时间还没重置，说明后端主动断开了\r\n            this.reConnect();\r\n        }, this.respTimeout)\r\n    }\r\n\r\n    //心跳检测定时器重置\r\n    heartCheckReset() {\r\n        clearTimeout(this.timeoutObj);\r\n        return this;\r\n    }\r\n\r\n    //心跳应答检测定时器重置\r\n    heartRespCheckReset() {\r\n        clearTimeout(this.serverTimeoutObj);\r\n        return this;\r\n    }\r\n    //清除所有定时器\r\n    clearAllTimeout() {\r\n        //清除重连定时器\r\n        clearTimeout(this.reConnectTimeoutObj);\r\n        //清除心跳包定时器\r\n        this.heartCheckReset();\r\n        this.heartRespCheckReset();\r\n        return this;\r\n    }\r\n\r\n    doWithFunc(data) {\r\n        var msgType = data.msgType;\r\n        //需要初始化链路的消息\r\n        switch (msgType) {\r\n            case \"msgUserOffline\":\r\n                this.clearWs(data.msgData);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        //调用业务脚本\r\n        WsFunc.doWithFunc(data);\r\n    }\r\n\r\n    clearWs(data) {\r\n        var userId = data.userId;\r\n        if (userId != oops.storage.getUser()) {\r\n            oops.log.logNet(\"非法用户报文，丢弃\");\r\n            return;\r\n        }\r\n        this.initWs();\r\n    }\r\n\r\n    isClose() {\r\n        return !this.isConnected;\r\n    }\r\n\r\n    // /**\r\n    //  * 注册连接成功回调\r\n    //  * @param {*} callback \r\n    //  */\r\n    // registerConnectSuccessCallback(callback){\r\n    // \tthis._connectServerSuccessFunc = callback;\r\n    // }\r\n}\r\n\r\n"]}