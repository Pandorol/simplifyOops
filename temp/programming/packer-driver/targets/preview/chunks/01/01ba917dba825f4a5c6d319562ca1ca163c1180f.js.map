{"version":3,"sources":["file:///G:/sxbs2/sxbs2/assets/core/common/storage/StorageSecuritySimple.ts"],"names":["StorageSecuritySimple","oops","constructor","secretkey","key","config","game","localDataKey","iv","localDataIv","encrypt","str","er","i","length","String","fromCharCode","charCodeAt","decrypt","dr","encryptKey"],"mappings":";;;oCAgBaA,qB;;;;;;;;;;;;;;;;;;AAfJC,MAAAA,I,iBAAAA,I;;;;;6FADT;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;uCACaD,qB,GAAN,MAAMA,qBAAN,CAAwD;AAG3DE,QAAAA,WAAW,GAAG;AAAA,eAFNC,SAEM,GAFc,IAEd;AACV,cAAMC,GAAG,GAAG;AAAA;AAAA,4BAAKC,MAAL,CAAYC,IAAZ,CAAiBC,YAA7B;AACA,cAAMC,EAAE,GAAG;AAAA;AAAA,4BAAKH,MAAL,CAAYC,IAAZ,CAAiBG,WAA5B;AACA,eAAKN,SAAL,GAAiBC,GAAG,GAAGI,EAAvB;AACH;;AAEDE,QAAAA,OAAO,CAACC,GAAD,EAAsB;AACzB,cAAIC,EAAE,GAAG,EAAT;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjCD,YAAAA,EAAE,IAAIG,MAAM,CAACC,YAAP,CAAoBL,GAAG,CAACM,UAAJ,CAAeJ,CAAf,IAAoB,KAAKV,SAAL,CAAec,UAAf,CAA0BJ,CAAC,GAAG,KAAKV,SAAL,CAAeW,MAA7C,CAAxC,CAAN;AACH;;AACD,iBAAOF,EAAP;AACH;;AAEDM,QAAAA,OAAO,CAACP,GAAD,EAAsB;AACzB,cAAIQ,EAAE,GAAG,EAAT;;AACA,eAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjCM,YAAAA,EAAE,IAAIJ,MAAM,CAACC,YAAP,CAAoBL,GAAG,CAACM,UAAJ,CAAeJ,CAAf,IAAoB,KAAKV,SAAL,CAAec,UAAf,CAA0BJ,CAAC,GAAG,KAAKV,SAAL,CAAeW,MAA7C,CAAxC,CAAN;AACH;;AACD,iBAAOK,EAAP;AACH;;AAEDC,QAAAA,UAAU,CAACT,GAAD,EAAsB;AAC5B,iBAAO,KAAKD,OAAL,CAAaC,GAAb,CAAP;AACH;;AA3B0D,O","sourcesContent":["//cpall\r\nimport { oops } from \"../../Oops\";\r\nimport { IStorageSecurity } from \"./StorageManager\";\r\n\r\n/** \r\n * 本地存储加密\r\n * 优点：\r\n * 1、代码体积小\r\n * 2、不依赖第三方库，使用这套方案可删除 \r\n *    StorageSecurityCrypto.ts\r\n *    EncryptUtil.ts\r\n *    package.json 中的crypto依赖减小包体\r\n * \r\n * 缺点：\r\n * 1、加密强度小\r\n */\r\nexport class StorageSecuritySimple implements IStorageSecurity {\r\n    private secretkey: string = null!;\r\n\r\n    constructor() {\r\n        const key = oops.config.game.localDataKey;\r\n        const iv = oops.config.game.localDataIv;\r\n        this.secretkey = key + iv;\r\n    }\r\n\r\n    encrypt(str: string): string {\r\n        let er = '';\r\n        for (let i = 0; i < str.length; i++) {\r\n            er += String.fromCharCode(str.charCodeAt(i) ^ this.secretkey.charCodeAt(i % this.secretkey.length));\r\n        }\r\n        return er;\r\n    }\r\n\r\n    decrypt(str: string): string {\r\n        let dr = '';\r\n        for (let i = 0; i < str.length; i++) {\r\n            dr += String.fromCharCode(str.charCodeAt(i) ^ this.secretkey.charCodeAt(i % this.secretkey.length));\r\n        }\r\n        return dr;\r\n    }\r\n\r\n    encryptKey(str: string): string {\r\n        return this.encrypt(str);\r\n    }\r\n}"]}